
# import os
# import streamlit as st
# import pandas as pd
# from datetime import datetime
# from supabase import create_client
# from dotenv import load_dotenv
# import logging
# import re

# # -------------------------
# # Translation dictionary
# # -------------------------
# TRANSLATIONS = {
#     'en': {
#         'title': 'ü§ù Community Matcher',
#         'today': 'Today',
#         'navigation': 'Navigation',
#         'home': 'Home',
#         'register_beneficiary': 'Register Beneficiary',
#         'register_supporter': 'Register Supporter/Donor',
#         'reports': 'Reports',
#         'admin': 'Admin',
#         'language': 'Language',
#         'welcome_message': 'Welcome to the Community Matcher platform. Connect Beneficiaries with Supporters offering help.',
#         'system_status': 'System Status',
#         'features_disabled': 'Some features are disabled due to database issues:',
#         'admin_login': 'Admin Login',
#         'admin_email': 'Admin Email',
#         'admin_password': 'Admin Password',
#         'login_as_admin': 'Login as Admin',
#         'admin_logged_in': 'Admin logged in!',
#         'invalid_credentials': 'Invalid admin credentials',
#         'full_name': 'Full Name',
#         'date_of_birth': 'Date of Birth',
#         'address': 'Address',
#         'phone_number': 'Phone Number',
#         'email': 'Email',
#         'bank_account': 'Bank Account',
#         'relationship_to_org': 'Relationship to Organization',
#         'direct_beneficiary': 'Direct Beneficiary',
#         'family_member': 'Family Member',
#         'description_of_need': 'Description of Need or Support',
#         'declaration': 'I declare that the information is accurate and I consent to data use.',
#         'register_beneficiary_btn': 'Register Beneficiary',
#         'org_name': 'Full Name / Organization Name',
#         'contact_person': 'Contact Person (if organization)',
#         'type_of_support': 'Type of Support',
#         'financial': 'Financial',
#         'in_kind': 'In-Kind',
#         'volunteer': 'Volunteer',
#         'other': 'Other',
#         'donation_value': 'Donation Amount / Value',
#         'frequency': 'Frequency',
#         'one_time': 'One-time',
#         'monthly': 'Monthly',
#         'quarterly': 'Quarterly',
#         'annually': 'Annually',
#         'preferred_contact': 'Preferred Method of Contact',
#         'phone': 'Phone',
#         'mail': 'Mail',
#         'register_supporter_btn': 'Register Supporter',
#         'reports_dashboard': 'üìä Reports Dashboard',
#         'summary': 'üìå Summary',
#         'beneficiaries': 'Beneficiaries',
#         'supporters': 'Supporters',
#         'matches': 'Matches',
#         'download_csv': '‚¨áÔ∏è Download {table} CSV',
#         'no_records': 'No {table} records found.',
#         'success_registered': '{type} registered successfully!',
#         'failed_register': 'Failed to register {type}.',
#         'complete_required_fields': 'Please complete all required fields and agree to the declaration.',
#         'invalid_email': 'Invalid email format.',
#         'invalid_phone': 'Invalid phone number.',
#         'supabase_error': 'Supabase credentials missing. Put SUPABASE_URL and SUPABASE_KEY in a .env file.'
#     },
#     'de': {
#         'title': 'ü§ù Community Matcher',
#         'today': 'Heute',
#         'navigation': 'Navigation',
#         'home': 'Startseite',
#         'register_beneficiary': 'Beg√ºnstigten registrieren',
#         'register_supporter': 'Unterst√ºtzer/Spender registrieren',
#         'reports': 'Berichte',
#         'admin': 'Admin',
#         'language': 'Sprache',
#         'welcome_message': 'Willkommen bei der Community Matcher Plattform. Verbinden Sie Beg√ºnstigte mit Unterst√ºtzern, die Hilfe anbieten.',
#         'system_status': 'Systemstatus',
#         'features_disabled': 'Einige Funktionen sind aufgrund von Datenbankproblemen deaktiviert:',
#         'admin_login': 'Admin-Anmeldung',
#         'admin_email': 'Admin E-Mail',
#         'admin_password': 'Admin Passwort',
#         'login_as_admin': 'Als Admin anmelden',
#         'admin_logged_in': 'Admin angemeldet!',
#         'invalid_credentials': 'Ung√ºltige Admin-Anmeldedaten',
#         'full_name': 'Vollst√§ndiger Name',
#         'date_of_birth': 'Geburtsdatum',
#         'address': 'Adresse',
#         'phone_number': 'Telefonnummer',
#         'email': 'E-Mail',
#         'bank_account': 'Bankkonto',
#         'relationship_to_org': 'Beziehung zur Organisation',
#         'direct_beneficiary': 'Direkter Beg√ºnstigter',
#         'family_member': 'Familienmitglied',
#         'description_of_need': 'Beschreibung des Bedarfs oder der Unterst√ºtzung',
#         'declaration': 'Ich erkl√§re, dass die Informationen korrekt sind und ich der Datennutzung zustimme.',
#         'register_beneficiary_btn': 'Beg√ºnstigten registrieren',
#         'org_name': 'Vollst√§ndiger Name / Organisationsname',
#         'contact_person': 'Kontaktperson (falls Organisation)',
#         'type_of_support': 'Art der Unterst√ºtzung',
#         'financial': 'Finanziell',
#         'in_kind': 'Sachleistung',
#         'volunteer': 'Freiwillig',
#         'other': 'Andere',
#         'donation_value': 'Spendenbetrag / Wert',
#         'frequency': 'H√§ufigkeit',
#         'one_time': 'Einmalig',
#         'monthly': 'Monatlich',
#         'quarterly': 'Viertelj√§hrlich',
#         'annually': 'J√§hrlich',
#         'preferred_contact': 'Bevorzugte Kontaktmethode',
#         'phone': 'Telefon',
#         'mail': 'Post',
#         'register_supporter_btn': 'Unterst√ºtzer registrieren',
#         'reports_dashboard': 'üìä Berichte Dashboard',
#         'summary': 'üìå Zusammenfassung',
#         'beneficiaries': 'Beg√ºnstigte',
#         'supporters': 'Unterst√ºtzer',
#         'matches': '√úbereinstimmungen',
#         'download_csv': '‚¨áÔ∏è {table} CSV herunterladen',
#         'no_records': 'Keine {table}-Datens√§tze gefunden.',
#         'success_registered': '{type} erfolgreich registriert!',
#         'failed_register': 'Registrierung von {type} fehlgeschlagen.',
#         'complete_required_fields': 'Bitte f√ºllen Sie alle Pflichtfelder aus und stimmen Sie der Erkl√§rung zu.',
#         'invalid_email': 'Ung√ºltiges E-Mail-Format.',
#         'invalid_phone': 'Ung√ºltige Telefonnummer.',
#         'supabase_error': 'Supabase-Anmeldedaten fehlen. Setzen Sie SUPABASE_URL und SUPABASE_KEY in eine .env-Datei.'
#     },
#     'es': {
#         'title': 'ü§ù Community Matcher',
#         'today': 'Hoy',
#         'navigation': 'Navegaci√≥n',
#         'home': 'Inicio',
#         'register_beneficiary': 'Registrar Beneficiario',
#         'register_supporter': 'Registrar Partidario/Donante',
#         'reports': 'Informes',
#         'admin': 'Admin',
#         'language': 'Idioma',
#         'welcome_message': 'Bienvenido a la plataforma Community Matcher. Conecta Beneficiarios con Partidarios que ofrecen ayuda.',
#         'system_status': 'Estado del Sistema',
#         'features_disabled': 'Algunas funciones est√°n deshabilitadas debido a problemas de base de datos:',
#         'admin_login': 'Inicio de Sesi√≥n de Admin',
#         'admin_email': 'Email de Admin',
#         'admin_password': 'Contrase√±a de Admin',
#         'login_as_admin': 'Iniciar Sesi√≥n como Admin',
#         'admin_logged_in': '¬°Admin conectado!',
#         'invalid_credentials': 'Credenciales de admin inv√°lidas',
#         'full_name': 'Nombre Completo',
#         'date_of_birth': 'Fecha de Nacimiento',
#         'address': 'Direcci√≥n',
#         'phone_number': 'N√∫mero de Tel√©fono',
#         'email': 'Email',
#         'bank_account': 'Cuenta Bancaria',
#         'relationship_to_org': 'Relaci√≥n con la Organizaci√≥n',
#         'direct_beneficiary': 'Beneficiario Directo',
#         'family_member': 'Miembro de la Familia',
#         'description_of_need': 'Descripci√≥n de Necesidad o Apoyo',
#         'declaration': 'Declaro que la informaci√≥n es precisa y consiento el uso de datos.',
#         'register_beneficiary_btn': 'Registrar Beneficiario',
#         'org_name': 'Nombre Completo / Nombre de Organizaci√≥n',
#         'contact_person': 'Persona de Contacto (si es organizaci√≥n)',
#         'type_of_support': 'Tipo de Apoyo',
#         'financial': 'Financiero',
#         'in_kind': 'En Especie',
#         'volunteer': 'Voluntario',
#         'other': 'Otro',
#         'donation_value': 'Cantidad de Donaci√≥n / Valor',
#         'frequency': 'Frecuencia',
#         'one_time': 'Una vez',
#         'monthly': 'Mensual',
#         'quarterly': 'Trimestral',
#         'annually': 'Anual',
#         'preferred_contact': 'M√©todo de Contacto Preferido',
#         'phone': 'Tel√©fono',
#         'mail': 'Correo',
#         'register_supporter_btn': 'Registrar Partidario',
#         'reports_dashboard': 'üìä Panel de Informes',
#         'summary': 'üìå Resumen',
#         'beneficiaries': 'Beneficiarios',
#         'supporters': 'Partidarios',
#         'matches': 'Coincidencias',
#         'download_csv': '‚¨áÔ∏è Descargar CSV de {table}',
#         'no_records': 'No se encontraron registros de {table}.',
#         'success_registered': '¬°{type} registrado exitosamente!',
#         'failed_register': 'Error al registrar {type}.',
#         'complete_required_fields': 'Por favor complete todos los campos requeridos y acepte la declaraci√≥n.',
#         'invalid_email': 'Formato de email inv√°lido.',
#         'invalid_phone': 'N√∫mero de tel√©fono inv√°lido.',
#         'supabase_error': 'Faltan credenciales de Supabase. Ponga SUPABASE_URL y SUPABASE_KEY en un archivo .env.'
#     },
#     'fr': {
#         'title': 'ü§ù Community Matcher',
#         'today': "Aujourd'hui",
#         'navigation': 'Navigation',
#         'home': 'Accueil',
#         'register_beneficiary': 'Inscrire un B√©n√©ficiaire',
#         'register_supporter': 'Inscrire un Supporter/Donateur',
#         'reports': 'Rapports',
#         'admin': 'Admin',
#         'language': 'Langue',
#         'welcome_message': 'Bienvenue sur la plateforme Community Matcher. Connectez les B√©n√©ficiaires avec les Supporters offrant de l\'aide.',
#         'system_status': '√âtat du Syst√®me',
#         'features_disabled': 'Certaines fonctionnalit√©s sont d√©sactiv√©es en raison de probl√®mes de base de donn√©es:',
#         'admin_login': 'Connexion Admin',
#         'admin_email': 'Email Admin',
#         'admin_password': 'Mot de Passe Admin',
#         'login_as_admin': 'Se Connecter en tant qu\'Admin',
#         'admin_logged_in': 'Admin connect√©!',
#         'invalid_credentials': 'Identifiants admin invalides',
#         'full_name': 'Nom Complet',
#         'date_of_birth': 'Date de Naissance',
#         'address': 'Adresse',
#         'phone_number': 'Num√©ro de T√©l√©phone',
#         'email': 'Email',
#         'bank_account': 'Compte Bancaire',
#         'relationship_to_org': 'Relation avec l\'Organisation',
#         'direct_beneficiary': 'B√©n√©ficiaire Direct',
#         'family_member': 'Membre de la Famille',
#         'description_of_need': 'Description du Besoin ou du Support',
#         'declaration': 'Je d√©clare que les informations sont exactes et je consens √† l\'utilisation des donn√©es.',
#         'register_beneficiary_btn': 'Inscrire le B√©n√©ficiaire',
#         'org_name': 'Nom Complet / Nom d\'Organisation',
#         'contact_person': 'Personne de Contact (si organisation)',
#         'type_of_support': 'Type de Support',
#         'financial': 'Financier',
#         'in_kind': 'En Nature',
#         'volunteer': 'B√©n√©vole',
#         'other': 'Autre',
#         'donation_value': 'Montant de Don / Valeur',
#         'frequency': 'Fr√©quence',
#         'one_time': 'Une fois',
#         'monthly': 'Mensuel',
#         'quarterly': 'Trimestriel',
#         'annually': 'Annuel',
#         'preferred_contact': 'M√©thode de Contact Pr√©f√©r√©e',
#         'phone': 'T√©l√©phone',
#         'mail': 'Courrier',
#         'register_supporter_btn': 'Inscrire le Supporter',
#         'reports_dashboard': 'üìä Tableau de Bord des Rapports',
#         'summary': 'üìå R√©sum√©',
#         'beneficiaries': 'B√©n√©ficiaires',
#         'supporters': 'Supporters',
#         'matches': 'Correspondances',
#         'download_csv': '‚¨áÔ∏è T√©l√©charger CSV {table}',
#         'no_records': 'Aucun enregistrement de {table} trouv√©.',
#         'success_registered': '{type} inscrit avec succ√®s!',
#         'failed_register': '√âchec de l\'inscription de {type}.',
#         'complete_required_fields': 'Veuillez remplir tous les champs obligatoires et accepter la d√©claration.',
#         'invalid_email': 'Format d\'email invalide.',
#         'invalid_phone': 'Num√©ro de t√©l√©phone invalide.',
#         'supabase_error': 'Identifiants Supabase manquants. Mettez SUPABASE_URL et SUPABASE_KEY dans un fichier .env.'
#     },
#     'am': {  # Amharic
#         'title': 'ü§ù ·ã®·àõ·àÖ·â†·à®·à∞·â• ·àõ·åà·äì·äõ',
#         'today': '·ãõ·à¨',
#         'navigation': '·àò·àÑ·åÉ',
#         'home': '·ãà·ã∞ ·â§·âµ',
#         'register_beneficiary': '·â∞·å†·âÉ·àö·äï ·àò·àò·ãù·åà·â•',
#         'register_supporter': '·ã∞·åã·çä/·àà·åã·àΩ ·àò·àò·ãù·åà·â•',
#         'reports': '·à™·çñ·à≠·â∂·âΩ',
#         'admin': '·ä†·àµ·â∞·ã≥·ã≥·à™',
#         'language': '·âã·äï·âã',
#         'welcome_message': '·ãà·ã∞ ·ã®·àõ·àÖ·â†·à®·à∞·â• ·àõ·åà·äì·äõ ·àò·ãµ·à®·ä≠ ·ä•·äï·ä≥·äï ·â†·ã∞·àÖ·äì ·àò·å°·ç¢ ·â∞·å†·âÉ·àö·ãé·âΩ·äï ·ä•·à≠·ã≥·â≥ ·ä®·àö·ã´·âÄ·à≠·â° ·ã∞·åã·çä·ãé·âΩ ·åã·à≠ ·ã´·åà·äì·äô·ç¢',
#         'system_status': '·ã®·àµ·à≠·ãì·âµ ·àÅ·äî·â≥',
#         'features_disabled': '·â†·àò·à®·åÉ ·âã·âµ ·âΩ·åç·àÆ·âΩ ·àù·ä≠·äï·ã´·âµ ·ä†·äï·ã≥·äï·ãµ ·â£·àÖ·à™·ã´·âµ ·â∞·à∞·äì·ä≠·àà·ãã·àç:',
#         'admin_login': '·ä†·àµ·â∞·ã≥·ã≥·à™ ·àò·åç·â¢·ã´',
#         'admin_email': '·ä†·àµ·â∞·ã≥·ã≥·à™ ·ä¢·àú·ã≠·àç',
#         'admin_password': '·ä†·àµ·â∞·ã≥·ã≥·à™ ·ã®·ã≠·àà·çç ·âÉ·àç',
#         'login_as_admin': '·ä•·äï·ã∞ ·ä†·àµ·â∞·ã≥·ã≥·à™ ·ã≠·åç·â°',
#         'admin_logged_in': '·ä†·àµ·â∞·ã≥·ã≥·à™ ·åà·â•·â∑·àç!',
#         'invalid_credentials': '·ã®·â∞·à≥·à≥·â∞ ·ä†·àµ·â∞·ã≥·ã≥·à™ ·àò·à®·åÉ',
#         'full_name': '·àô·àâ ·àµ·àù',
#         'date_of_birth': '·ã®·âµ·ãç·àç·ãµ ·âÄ·äï',
#         'address': '·ä†·ãµ·à´·àª',
#         'phone_number': '·àµ·àç·ä≠ ·âÅ·å•·à≠',
#         'email': '·ä¢·àú·ã≠·àç',
#         'bank_account': '·ã®·â£·äï·ä≠ ·àí·à≥·â•',
#         'relationship_to_org': '·ä®·ãµ·à≠·åÖ·â± ·åã·à≠ ·ã´·àà·ãç ·åç·äï·äô·äê·âµ',
#         'direct_beneficiary': '·âÄ·å•·â∞·äõ ·â∞·å†·âÉ·àö',
#         'family_member': '·ã®·â§·â∞·à∞·â• ·ä†·â£·àç',
#         'description_of_need': '·ã®·çç·àã·åé·âµ ·ãà·ã≠·àù ·ãµ·åã·çç ·àò·åç·àà·å´',
#         'declaration': '·àò·à®·åÉ·ãç ·âµ·ä≠·ä≠·àç ·àò·àÜ·äë·äï ·ä†·à®·åã·åç·å£·àà·àÅ ·ä•·äì ·àà·àò·à®·åÉ ·ä†·å†·âÉ·âÄ·àù ·ä•·àµ·àõ·àõ·àà·àÅ·ç¢',
#         'register_beneficiary_btn': '·â∞·å†·âÉ·àö·äï ·àò·àò·ãù·åà·â•',
#         'org_name': '·àô·àâ ·àµ·àù / ·ã®·ãµ·à≠·åÖ·âµ ·àµ·àù',
#         'contact_person': '·ã®·àò·åà·äì·äõ ·à∞·ãç (·ãµ·à≠·åÖ·âµ ·ä®·àÜ·äê)',
#         'type_of_support': '·ã®·ãµ·åã·çç ·ä†·ã≠·äê·âµ',
#         'financial': '·ã®·åà·äï·ãò·â•',
#         'in_kind': '·ä•·âÉ',
#         'volunteer': '·â†·åé ·çà·âÉ·ã∞·äõ',
#         'other': '·àå·àã',
#         'donation_value': '·ã®·àç·åà·à≥ ·àò·å†·äï / ·ãã·åã',
#         'frequency': '·ãµ·åç·åç·àû·àΩ',
#         'one_time': '·ä†·äï·ãµ ·åä·ãú',
#         'monthly': '·ãà·à≠·àÉ·ãä',
#         'quarterly': '·à©·â• ·ä†·àò·â≥·ãä',
#         'annually': '·ä†·àò·â≥·ãä',
#         'preferred_contact': '·ã®·â∞·àò·à®·å† ·ã®·àò·åà·äì·äõ ·àò·äï·åà·ãµ',
#         'phone': '·àµ·àç·ä≠',
#         'mail': '·çñ·àµ·â≥',
#         'register_supporter_btn': '·ã∞·åã·çä·äï ·àò·àò·ãù·åà·â•',
#         'reports_dashboard': 'üìä ·ã®·à™·çñ·à≠·â∂·âΩ ·ã≥·àΩ·â¶·à≠·ãµ',
#         'summary': 'üìå ÿÆŸÑÿßÿµÿ©',
#         'beneficiaries': '·â∞·å†·âÉ·àö·ãé·âΩ',
#         'supporters': '·ã∞·åã·çä·ãé·âΩ',
#         'matches': '·åç·äï·äô·äê·â∂·âΩ',
#         'download_csv': '‚¨áÔ∏è {table} CSV ·ä†·ãç·à≠·ãµ',
#         'no_records': '·ã®{table} ·àò·ãù·åà·â¶·âΩ ·ä†·àç·â∞·åà·äô·àù·ç¢',
#         'success_registered': '{type} ·â†·â∞·à≥·ä´ ·àÅ·äî·â≥ ·â∞·àò·ãù·åç·âß·àç!',
#         'failed_register': '{type} ·àõ·àµ·àò·ãù·åà·â• ·ä†·àç·â∞·à≥·ä´·àù·ç¢',
#         'complete_required_fields': '·ä•·â£·ä≠·ãé ·àÅ·àâ·äï·àù ·ä†·àµ·çà·àã·åä ·àò·àµ·äÆ·âΩ ·ã≠·àô·àâ ·ä•·äì ·àà·àò·åç·àà·å´·ãç ·ã≠·àµ·àõ·àô·ç¢',
#         'invalid_email': '·ã®·â∞·à≥·à≥·â∞ ·ä¢·àú·ã≠·àç ·âÖ·à≠·çÖ·ç¢',
#         'invalid_phone': '·ã®·â∞·à≥·à≥·â∞ ·àµ·àç·ä≠ ·âÅ·å•·à≠·ç¢',
#         'supabase_error': '·ã®Supabase ·àõ·à®·åã·åà·å´·ãé·âΩ ·â∞·à∞·äì·ä≠·àà·ãã·àç·ç¢ SUPABASE_URL ·ä•·äì SUPABASE_KEY ·â†.env ·çã·ã≠·àç ·ãç·àµ·å• ·ã´·àµ·âÄ·àù·å°·ç¢'
#     },
#     'ti': {  # Tigrinya
#         'title': 'ü§ù ·äì·ã≠ ·àï·â•·à®·â∞·à∞·â• ·àõ·àï·â†·à≠',
#         'today': '·àé·àö',
#         'navigation': '·àò·à≥·åà·à™',
#         'home': '·åà·ãõ',
#         'register_beneficiary': '·â∞·å†·âÉ·àö ·àù·ãù·åà·â£',
#         'register_supporter': '·ã∞·åã·çä/·ãã·àÉ·â¢ ·àù·ãù·åà·â£',
#         'reports': '·à™·çñ·à≠·â≥·âµ',
#         'admin': '·ä£·àµ·â∞·ã≥·ã≥·à™',
#         'language': '·âã·äï·âã',
#         'welcome_message': '·äì·â• ·äì·ã≠ ·àï·â•·à®·â∞·à∞·â• ·àõ·àï·â†·à≠ ·àò·ãµ·à®·äΩ ·ä•·äï·âã·ãï ·â•·ã∞·àì·äï ·àò·åª·ä•·ä©·àù·ç¢ ·â∞·å†·âÉ·àõ·ã≠ ·àù·àµ ·àì·åà·ãõ ·ãö·àÖ·â° ·ã∞·åà·çç·â≤ ·ä£·àï·àΩ·à©·ç¢',
#         'system_status': '·àì·â†·à¨·â≥ ·àµ·à≠·ãì·âµ',
#         'features_disabled': '·â•·à∞·â†·â• ·äì·ã≠ ·ã≥·â≥·â§·ãù ·å∏·åà·àõ·âµ ·åà·àà ·â£·àÖ·à≠·ã´·âµ ·â∞·ãì·åΩ·ãÆ·àù:',
#         'admin_login': '·ä£·àµ·â∞·ã≥·ã≥·à™ ·àò·ä•·â∞·ãä',
#         'admin_email': '·ä£·àµ·â∞·ã≥·ã≥·à™ ·ä¢·àò·ã≠·àç',
#         'admin_password': '·ä£·àµ·â∞·ã≥·ã≥·à™ ·àù·àµ·å¢·à≠ ·âÉ·àç',
#         'login_as_admin': '·ä®·àù ·ä£·àµ·â∞·ã≥·ã≥·à™ ·ä£·â±',
#         'admin_logged_in': '·ä£·àµ·â∞·ã≥·ã≥·à™ ·ä£·â≤·ã©!',
#         'invalid_credentials': '·ãò·ã≠·âÖ·äë·ãï ·äì·ã≠ ·ä£·àµ·â∞·ã≥·ã≥·à™ ·àò·à®·åã·åà·å∫',
#         'full_name': '·àô·àâ·ä• ·àµ·àù',
#         'date_of_birth': '·ãï·àà·âµ ·àç·ã∞·âµ',
#         'address': '·ä£·ãµ·à´·àª',
#         'phone_number': '·äì·ã≠ ·â¥·àà·çé·äï ·âÅ·åΩ·à™',
#         'email': '·ä¢·àò·ã≠·àç',
#         'bank_account': '·äì·ã≠ ·â£·äï·ä≠ ·àí·à≥·â•',
#         'relationship_to_org': '·àù·àµ ·ãç·ã≥·â† ·ãò·àé ·ãù·àù·ãµ·äì',
#         'direct_beneficiary': '·âÄ·å•·â∞·äõ ·â∞·å†·âÉ·àö',
#         'family_member': '·äì·ã≠ ·àµ·ãµ·à´·â§·âµ ·ä£·â£·àç',
#         'description_of_need': '·äì·ã≠ ·ãµ·àå·âµ ·ãà·ã≠ ·ã∞·åà·çç ·àò·åç·àà·å∫',
#         'declaration': '·ä•·â≤ ·àì·â†·à¨·â≥ ·âÖ·äë·ãï ·àù·ãÉ·äë·äï ·äï·ä£·å†·âì·âï·àõ ·àò·à®·åÉ ·ãö·à∞·àõ·àù·ãï ·àù·ãÉ·äê·ã≠·äï ·ã®·à®·åã·åç·åΩ·ç¢',
#         'register_beneficiary_btn': '·â∞·å†·âÉ·àö ·àù·ãù·åà·â£',
#         'org_name': '·àô·àâ·ä• ·àµ·àù / ·äì·ã≠ ·ãç·ã≥·â† ·àµ·àù',
#         'contact_person': '·äì·ã≠ ·à≠·ä≠·â• ·à∞·â• (·ãç·ã≥·â† ·ä•·äï·â∞·äæ·ã≠·äë)',
#         'type_of_support': '·ãì·ã≠·äê·âµ ·ã∞·åà·çç',
#         'financial': '·åà·äï·ãò·â£·ãä',
#         'in_kind': '·äï·â•·à®·âµ',
#         'volunteer': '·ãà·àã·ã≥·ã≠·äê·âµ',
#         'other': '·ä´·àç·ä•',
#         'donation_value': '·àò·å†·äï ·ãà·ã≠ ·ãã·åã ·àÉ·ãµ·äê·âµ',
#         'frequency': '·ãµ·åç·åç·àù·äê·âµ',
#         'one_time': '·àì·ã∞ ·åç·ãú',
#         'monthly': '·ãà·à≠·àì·ãä',
#         'quarterly': '·à©·â•·ãì·ãä',
#         'annually': '·ãì·àò·â≥·ãä',
#         'preferred_contact': '·ãö·àò·à®·å∏ ·äì·ã≠ ·à≠·ä≠·â• ·ä£·åà·â£·â•',
#         'phone': '·â¥·àà·çé·äï',
#         'mail': '·çñ·àµ·â≥',
#         'register_supporter_btn': '·ã∞·åã·çä ·àù·ãù·åà·â£',
#         'reports_dashboard': 'üìä ·äì·ã≠ ·à™·çñ·à≠·â≥·âµ ·ã≥·àΩ·â¶·à≠·ãµ',
#         'summary': 'üìå ·àì·çÇ·à≠ ·àò·åç·àà·å∫',
#         'beneficiaries': '·â∞·å†·âÉ·àõ·ã≠',
#         'supporters': '·ã∞·åà·çç·â≤',
#         'matches': '·à≠·ä≠·â£·âµ',
#         'download_csv': '‚¨áÔ∏è {table} CSV ·ä£·ãç·à≠·ãµ',
#         'no_records': '·äì·ã≠ {table} ·àò·ãù·åà·â£·âµ ·ä£·ã≠·â∞·à®·äΩ·â°·äï·ç¢',
#         'success_registered': '{type} ·â•·ãì·ãà·âµ ·â∞·àò·ãù·åä·â°!',
#         'failed_register': '{type} ·àù·ãù·åà·â£ ·ä£·ã≠·â∞·à≥·ä´·äï·ç¢',
#         'complete_required_fields': '·â†·åÉ·äπ·àù ·ä©·àé·àù ·ä£·åà·ã∞·àµ·â≤ ·àò·àµ·äÆ·â≥·âµ ·àù·àç·ä°·äï ·äï·àò·åç·àà·å∫ ·à∞·àõ·àù·ãë·äï·ç¢',
#         'invalid_email': '·ãò·ã≠·âÖ·äë·ãï ·äì·ã≠ ·ä¢·àò·ã≠·àç ·âÖ·à≠·å∫·ç¢',
#         'invalid_phone': '·ãò·ã≠·âÖ·äë·ãï ·äì·ã≠ ·â¥·àà·çé·äï ·âÅ·åΩ·à™·ç¢',
#         'supabase_error': '·äì·ã≠ Supabase ·àò·à®·åã·åà·å∫·â≥·âµ ·å†·çä·ä¶·àù·ç¢ SUPABASE_URL ·ä®·àù·ä°·ãç·äï SUPABASE_KEY ·ä£·â• .env ·çã·ã≠·àç ·ä£·âê·àù·å°·ç¢'
#     }
# }

# # -------------------------
# # Translation helper function
# # -------------------------
# def get_text(key: str) -> str:
#     """Get translated text based on current language"""
#     lang = st.session_state.get('language', 'en')
#     return TRANSLATIONS.get(lang, TRANSLATIONS['en']).get(key, key)

# # -------------------------
# # Load config
# # -------------------------
# load_dotenv()
# SUPABASE_URL = os.getenv("SUPABASE_URL")
# SUPABASE_KEY = os.getenv("SUPABASE_KEY")

# if not SUPABASE_URL or not SUPABASE_KEY:
#     st.error(get_text('supabase_error'))
#     st.stop()

# supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

# # -------------------------
# # Logging setup
# # -------------------------
# logging.basicConfig(level=logging.INFO, filename='app.log')
# logger = logging.getLogger(__name__)

# # -------------------------
# # Session state initialization
# # -------------------------
# for key, default in {
#     "Admin_authenticated": False,
#     "schema_warnings": [],
#     "matches_enabled": True,
#     "locks_enabled": True,
#     "language": "en"
# }.items():
#     if key not in st.session_state:
#         st.session_state[key] = default

# # -------------------------
# # Helper functions
# # -------------------------
# def insert_record(table: str, data: dict) -> bool:
#     try:
#         res = supabase.table(table).insert(data).execute()
#         if hasattr(res, "data") and res.data:
#             logger.info(f"Inserted record into {table}: {res.data}")
#             return True
#         return False
#     except Exception as e:
#         logger.error(f"Insert failed for {table}: {str(e)}")
#         return False

# def fetch_table(table: str) -> pd.DataFrame:
#     try:
#         res = supabase.table(table).select("*").execute()
#         if hasattr(res, "data") and res.data:
#             return pd.DataFrame(res.data)
#         return pd.DataFrame()
#     except Exception as e:
#         logger.error(f"Fetch failed for {table}: {str(e)}")
#         return pd.DataFrame()

# def is_valid_email(email):
#     return re.match(r"[^@]+@[^@]+\.[^@]+", email)

# def is_valid_phone(phone):
#     return re.match(r"^\+?\d{7,15}$", phone)

# def mask_account(account):
#     return f"****{account[-4:]}" if account else ""

# # -------------------------
# # Schema validation
# # -------------------------
# def validate_schema():
#     critical_tables = [
#         ("beneficiaries", {"id", "full_name", "phone_number", "status", "bank_account"}),
#         ("supporters", {"id", "organization_name", "phone_number", "status"})
#     ]
#     optional_tables = [
#         ("matches", {"beneficiary_id", "supporter_id", "matched_at"}),
#         ("locks", {"lock_name", "is_locked", "locked_at"})
#     ]
#     warnings = []
#     for table, required_cols in critical_tables + optional_tables:
#         df = fetch_table(table)
#         if not df.empty and not required_cols.issubset(df.columns):
#             warnings.append(f"Table {table} missing required columns: {required_cols - set(df.columns)}")
#             logger.warning(f"Schema warning for table {table}: {warnings[-1]}")
#     st.session_state["schema_warnings"] = warnings
# validate_schema()

# # -------------------------
# # Streamlit UI
# # -------------------------
# st.set_page_config(page_title="Community Matcher", layout="wide")

# # Language selector at the top
# col1, col2 = st.columns([3, 1])
# with col1:
#     st.title(get_text('title'))
#     st.caption(f"üìÖ {get_text('today')}: {datetime.today().strftime('%B %d, %Y')}")

# with col2:
#     language_options = {
#         'en': 'üá∫üá∏ English',
#         'de': 'üá©üá™ Deutsch', 
#         'es': 'üá™üá∏ Espa√±ol',
#         'fr': 'üá´üá∑ Fran√ßais',
#         'am': 'üá™üáπ ·ä†·àõ·à≠·äõ',
#         'ti': 'üá™üá∑ ·âµ·åç·à≠·äõ'
#     }
    
#     selected_lang = st.selectbox(
#         get_text('language'),
#         options=list(language_options.keys()),
#         format_func=lambda x: language_options[x],
#         index=list(language_options.keys()).index(st.session_state.get('language', 'en'))
#     )
    
#     if selected_lang != st.session_state.get('language'):
#         st.session_state['language'] = selected_lang
#         st.rerun()

# # -------------------------
# # Sidebar navigation
# # -------------------------
# menu = st.sidebar.radio(get_text('navigation'), [
#     get_text('home'), 
#     get_text('register_beneficiary'), 
#     get_text('register_supporter'), 
#     get_text('reports'), 
#     get_text('admin')
# ])

# # -------------------------
# # Admin login only on Admin page
# # -------------------------
# if menu == get_text('admin') and not st.session_state["Admin_authenticated"]:
#     st.subheader(get_text('admin_login'))
#     with st.form("admin_login_form"):
#         admin_email = st.text_input(get_text('admin_email'))
#         admin_password = st.text_input(get_text('admin_password'), type="password")
#         admin_login_button = st.form_submit_button(get_text('login_as_admin'))
#         if admin_login_button:
#             if admin_email == "admin@example.com" and admin_password == "admin123":
#                 st.session_state["Admin_authenticated"] = True
#                 st.success(get_text('admin_logged_in'))
#                 st.rerun()
#             else:
#                 st.error(get_text('invalid_credentials'))
#     st.stop()

# # -------------------------
# # Pages
# # -------------------------
# if menu == get_text('home'):
#     st.markdown(get_text('welcome_message'))
#     if st.session_state["schema_warnings"]:
#         with st.expander(get_text('system_status'), expanded=True):
#             st.warning(get_text('features_disabled'))
#             for warning in st.session_state["schema_warnings"]:
#                 st.write(f"- {warning}")

# elif menu == get_text('register_beneficiary'):
#     st.subheader(get_text('register_beneficiary'))
#     with st.form("beneficiary_form"):
#         full_name = st.text_input(get_text('full_name'))
#         dob = st.date_input(get_text('date_of_birth'))
#         address = st.text_area(get_text('address'))
#         phone = st.text_input(get_text('phone_number'))
#         email = st.text_input(get_text('email'))
#         bank_account = st.text_input(get_text('bank_account'))
#         relationship = st.selectbox(get_text('relationship_to_org'), [get_text('direct_beneficiary'), get_text('family_member')])
#         description = st.text_area(get_text('description_of_need'))
#         declaration = st.checkbox(get_text('declaration'))
#         submit = st.form_submit_button(get_text('register_beneficiary_btn'))
#         if submit:
#             if full_name and phone and declaration:
#                 if email and not is_valid_email(email):
#                     st.error(get_text('invalid_email'))
#                 elif not is_valid_phone(phone):
#                     st.error(get_text('invalid_phone'))
#                 else:
#                     data = {
#                         "full_name": full_name,
#                         "date_of_birth": dob.strftime("%Y-%m-%d"),
#                         "address": address,
#                         "phone_number": phone,
#                         "email": email,
#                         "bank_account": bank_account,
#                         "relationship_to_org": relationship,
#                         "description_of_need": description,
#                         "declaration_consent": True,
#                         "submitted_at": datetime.now().isoformat(),
#                         "status": "Pending"
#                     }
#                     if insert_record("beneficiaries", data):
#                         st.success(get_text('success_registered').format(type=get_text('beneficiaries')))
#                     else:
#                         st.error(get_text('failed_register').format(type=get_text('beneficiaries')))
#             else:
#                 st.error(get_text('complete_required_fields'))

# elif menu == get_text('register_supporter'):
#     st.subheader(get_text('register_supporter'))
#     with st.form("supporter_form"):
#         org_name = st.text_input(get_text('org_name'))
#         contact_person = st.text_input(get_text('contact_person'))
#         address = st.text_area(get_text('address'))
#         phone = st.text_input(get_text('phone_number'))
#         email = st.text_input(get_text('email'))
#         support_type = st.multiselect(get_text('type_of_support'), [
#             get_text('financial'), 
#             get_text('in_kind'), 
#             get_text('volunteer'), 
#             get_text('other')
#         ])
#         donation_value = st.text_input(get_text('donation_value'))
#         frequency = st.selectbox(get_text('frequency'), [
#             get_text('one_time'), 
#             get_text('monthly'), 
#             get_text('quarterly'), 
#             get_text('annually')
#         ])
#         preferred_contact = st.selectbox(get_text('preferred_contact'), [
#             get_text('email'), 
#             get_text('phone'), 
#             get_text('mail')
#         ])
#         declaration = st.checkbox(get_text('declaration'))
#         submit = st.form_submit_button(get_text('register_supporter_btn'))
#         if submit:
#             if org_name and phone and declaration:
#                 if email and not is_valid_email(email):
#                     st.error(get_text('invalid_email'))
#                 elif not is_valid_phone(phone):
#                     st.error(get_text('invalid_phone'))
#                 else:
#                     data = {
#                         "organization_name": org_name,
#                         "contact_person": contact_person,
#                         "address": address,
#                         "phone_number": phone,
#                         "email": email,
#                         "type_of_support": ", ".join(support_type),
#                         "donation_value": donation_value,
#                         "frequency": frequency,
#                         "preferred_contact": preferred_contact,
#                         "declaration_consent": True,
#                         "submitted_at": datetime.now().isoformat(),
#                         "status": "Pending"
#                     }
#                     if insert_record("supporters", data):
#                         st.success(get_text('success_registered').format(type=get_text('supporters')))
#                     else:
#                         st.error(get_text('failed_register').format(type=get_text('supporters')))
#             else:
#                 st.error(get_text('complete_required_fields'))

# elif menu == get_text('reports'):
#     st.subheader(get_text('reports_dashboard'))

#     # Fetch data
#     b_df = fetch_table("beneficiaries")
#     s_df = fetch_table("supporters")
#     m_df = fetch_table("matches")

#     # Mask bank accounts
#     if not b_df.empty and "bank_account" in b_df.columns:
#         b_df["bank_account"] = b_df["bank_account"].apply(mask_account)

#     # Summary stats
#     st.markdown(f"### {get_text('summary')}")
#     col1, col2, col3 = st.columns(3)
#     col1.metric(get_text('beneficiaries'), len(b_df))
#     col2.metric(get_text('supporters'), len(s_df))
#     col3.metric(get_text('matches'), len(m_df))

#     st.markdown("---")

#     # Beneficiaries Section
#     st.markdown(f"### üßç {get_text('beneficiaries')}")
#     if not b_df.empty:
#         st.dataframe(b_df, use_container_width=True)
#         st.download_button(
#             get_text('download_csv').format(table=get_text('beneficiaries')), 
#             b_df.to_csv(index=False), 
#             "beneficiaries.csv"
#         )
#     else:
#         st.info(get_text('no_records').format(table=get_text('beneficiaries').lower()))

#     st.markdown("---")

#     # Supporters Section
#     st.markdown(f"### ü§ù {get_text('supporters')}")
#     if not s_df.empty:
#         st.dataframe(s_df, use_container_width=True)
#         st.download_button(
#             get_text('download_csv').format(table=get_text('supporters')), 
#             s_df.to_csv(index=False), 
#             "supporters.csv"
#         )
#     else:
#         st.info(get_text('no_records').format(table=get_text('supporters').lower()))

#     st.markdown("---")

#     # Matches Section
#     st.markdown(f"### üîó {get_text('matches')}")
#     if st.session_state.get("matches_enabled", True):
#         if not m_df.empty:
#             st.dataframe(m_df, use_container_width=True)
#             st.download_button(
#                 get_text('download_csv').format(table=get_text('matches')), 
#                 m_df.to_csv(index=False), 
#                 "matches.csv"
#             )
#         else:
#             st.info(get_text('no_records').format(table=get_text('matches').lower()))
import os
import streamlit as st
import pandas as pd
from datetime import datetime
from supabase import create_client
from dotenv import load_dotenv
import logging
import re

# -------------------------
# Translation dictionary
# -------------------------
TRANSLATIONS = {
    'en': {
        'title': 'ü§ù BetterTogether',
        'today': 'Today',
        'navigation': 'Navigation',
        'home': 'Home',
        'register_beneficiary': 'Register Beneficiary',
        'register_supporter': 'Register Supporter/Donor',
        'reports': 'Reports',
        "reports": "Reports",
        "reports_dashboard": "Reports Dashboard",
        "required_to_access": "is required to access this page.",

        'admin': 'Admin',
        'language': 'Language',
        'welcome_message': 'Welcome to the BetterTogether platform. Connect Beneficiaries with Supporters offering help.',
        'system_status': 'System Status',
        'features_disabled': 'Some features are disabled due to database issues:',
        'admin_login': 'Admin Login',
        'admin_email': 'Admin Email',
        'admin_password': 'Admin Password',
        'login_as_admin': 'Login as Admin',
        'admin_logged_in': 'Admin logged in!',
        'invalid_credentials': 'Invalid admin credentials',
        'full_name': 'Full Name',
        'date_of_birth': 'Date of Birth',
        'address': 'Address',
        'phone_number': 'Phone Number',
        'email': 'Email',
        'bank_account': 'Bank Account',
        'relationship_to_org': 'Relationship to Organization',
        'direct_beneficiary': 'Direct Beneficiary',
        'family_member': 'Family Member',
        'description_of_need': 'Description of Need or Support',
        'declaration': 'I declare that the information is accurate and I consent to data use.',
        'register_beneficiary_btn': 'Register Beneficiary',
        'org_name': 'Full Name / Organization Name',
        'contact_person': 'Contact Person (if organization)',
        'type_of_support': 'Type of Support',
        'financial': 'Financial',
        'in_kind': 'In-Kind',
        'volunteer': 'Volunteer',
        'other': 'Other',
        'donation_value': 'Donation Amount / Value',
        'frequency': 'Frequency',
        'one_time': 'One-time',
        'monthly': 'Monthly',
        'quarterly': 'Quarterly',
        'annually': 'Annually',
        'preferred_contact': 'Preferred Method of Contact',
        'phone': 'Phone',
        'mail': 'Mail',
        'register_supporter_btn': 'Register Supporter',
        'reports_dashboard': 'üìä Reports Dashboard',
        'summary': 'üìå Summary',
        'beneficiaries': 'Beneficiaries',
        'supporters': 'Supporters',
        'matches': 'Matches',
        'download_csv': '‚¨áÔ∏è Download {table} CSV',
        'no_records': 'No {table} records found.',
        'success_registered': '{type} registered successfully!',
        'failed_register': 'Failed to register {type}.',
        'complete_required_fields': 'Please complete all required fields and agree to the declaration.',
        'invalid_email': 'Invalid email format.',
        'invalid_phone': 'Invalid phone number.',
        'supabase_error': 'Supabase credentials missing. Put SUPABASE_URL and SUPABASE_KEY in a .env file.',
        'contact_admin': 'Contact Admin',
        'contact_us': 'Contact Us',
        'help_support': 'Help & Support',
        'subject': 'Subject',
        'message': 'Message',
        'urgent': 'Urgent',
        'general_inquiry': 'General Inquiry',
        'technical_issue': 'Technical Issue',
        'registration_help': 'Registration Help',
        'data_correction': 'Data Correction',
        'send_message': 'Send Message',
        'message_sent': 'Message sent successfully!',
        'message_failed': 'Failed to send message.',
        'admin_contact_info': 'Admin Contact Information',
        'phone_contact': 'Phone Contact',
        'email_contact': 'Email Contact',
        'office_hours': 'Office Hours',
        'emergency_contact': 'Emergency Contact',
        'faq': 'Frequently Asked Questions',
        'how_to_register': 'How to register?',
        'forgot_password': 'Forgot password?',
        'update_info': 'How to update my information?'
    },
    'de': {
        'title': 'ü§ù BetterTogether',
        'today': 'Heute',
        'navigation': 'Navigation',
        'home': 'Startseite',
        'register_beneficiary': 'Beg√ºnstigten registrieren',
        'register_supporter': 'Unterst√ºtzer/Spender registrieren',
        'reports': 'Berichte',
        'admin': 'Admin',
        'language': 'Sprache',
        'welcome_message': 'Willkommen bei der BetterTogether Plattform. Verbinden Sie Beg√ºnstigte mit Unterst√ºtzern, die Hilfe anbieten.',
        'system_status': 'Systemstatus',
        'features_disabled': 'Einige Funktionen sind aufgrund von Datenbankproblemen deaktiviert:',
        'admin_login': 'Admin-Anmeldung',
        'admin_email': 'Admin E-Mail',
        'admin_password': 'Admin Passwort',
        'login_as_admin': 'Als Admin anmelden',
        'admin_logged_in': 'Admin angemeldet!',
        'invalid_credentials': 'Ung√ºltige Admin-Anmeldedaten',
        'full_name': 'Vollst√§ndiger Name',
        'date_of_birth': 'Geburtsdatum',
        'address': 'Adresse',
        'phone_number': 'Telefonnummer',
        'email': 'E-Mail',
        'bank_account': 'Bankkonto',
        'relationship_to_org': 'Beziehung zur Organisation',
        'direct_beneficiary': 'Direkter Beg√ºnstigter',
        'family_member': 'Familienmitglied',
        'description_of_need': 'Beschreibung des Bedarfs oder der Unterst√ºtzung',
        'declaration': 'Ich erkl√§re, dass die Informationen korrekt sind und ich der Datennutzung zustimme.',
        'register_beneficiary_btn': 'Beg√ºnstigten registrieren',
        'org_name': 'Vollst√§ndiger Name / Organisationsname',
        'contact_person': 'Kontaktperson (falls Organisation)',
        'type_of_support': 'Art der Unterst√ºtzung',
        'financial': 'Finanziell',
        'in_kind': 'Sachleistung',
        'volunteer': 'Freiwillig',
        'other': 'Andere',
        'donation_value': 'Spendenbetrag / Wert',
        'frequency': 'H√§ufigkeit',
        'one_time': 'Einmalig',
        'monthly': 'Monatlich',
        'quarterly': 'Viertelj√§hrlich',
        'annually': 'J√§hrlich',
        'preferred_contact': 'Bevorzugte Kontaktmethode',
        'phone': 'Telefon',
        'mail': 'Post',
        'register_supporter_btn': 'Unterst√ºtzer registrieren',
        'reports_dashboard': 'üìä Berichte Dashboard',
        'summary': 'üìå Zusammenfassung',
        'beneficiaries': 'Beg√ºnstigte',
        'supporters': 'Unterst√ºtzer',
        'matches': '√úbereinstimmungen',
        'download_csv': '‚¨áÔ∏è {table} CSV herunterladen',
        'no_records': 'Keine {table}-Datens√§tze gefunden.',
        'success_registered': '{type} erfolgreich registriert!',
        'failed_register': 'Registrierung von {type} fehlgeschlagen.',
        'complete_required_fields': 'Bitte f√ºllen Sie alle Pflichtfelder aus und stimmen Sie der Erkl√§rung zu.',
        'invalid_email': 'Ung√ºltiges E-Mail-Format.',
        'invalid_phone': 'Ung√ºltige Telefonnummer.',
        'supabase_error': 'Supabase-Anmeldedaten fehlen. Setzen Sie SUPABASE_URL und SUPABASE_KEY in eine .env-Datei.',
        'contact_admin': 'Admin Kontaktieren',
        'contact_us': 'Kontaktieren Sie uns',
        'help_support': 'Hilfe und Support',
        'subject': 'Betreff',
        'message': 'Nachricht',
        'urgent': 'Dringend',
        'general_inquiry': 'Allgemeine Anfrage',
        'technical_issue': 'Technisches Problem',
        'registration_help': 'Registrierungshilfe',
        'data_correction': 'Datenkorrektur',
        'send_message': 'Nachricht Senden',
        'message_sent': 'Nachricht erfolgreich gesendet!',
        'message_failed': 'Nachricht konnte nicht gesendet werden.',
        'admin_contact_info': 'Admin-Kontaktinformationen',
        'phone_contact': 'Telefonkontakt',
        'email_contact': 'E-Mail-Kontakt',
        'office_hours': 'B√ºrozeiten',
        'emergency_contact': 'Notfallkontakt',
        'faq': 'H√§ufig Gestellte Fragen',
        'how_to_register': 'Wie registriere ich mich?',
        'forgot_password': 'Passwort vergessen?',
        'update_info': 'Wie aktualisiere ich meine Informationen?'
    },
    'es': {
        'title': 'ü§ù BetterTogether',
        'today': 'Hoy',
        'navigation': 'Navegaci√≥n',
        'home': 'Inicio',
        'register_beneficiary': 'Registrar Beneficiario',
        'register_supporter': 'Registrar Partidario/Donante',
        'reports': 'Informes',
        'admin': 'Admin',
        'language': 'Idioma',
        'welcome_message': 'Bienvenido a la plataforma BetterTogether. Conecta Beneficiarios con Partidarios que ofrecen ayuda.',
        'system_status': 'Estado del Sistema',
        'features_disabled': 'Algunas funciones est√°n deshabilitadas debido a problemas de base de datos:',
        'admin_login': 'Inicio de Sesi√≥n de Admin',
        'admin_email': 'Email de Admin',
        'admin_password': 'Contrase√±a de Admin',
        'login_as_admin': 'Iniciar Sesi√≥n como Admin',
        'admin_logged_in': '¬°Admin conectado!',
        'invalid_credentials': 'Credenciales de admin inv√°lidas',
        'full_name': 'Nombre Completo',
        'date_of_birth': 'Fecha de Nacimiento',
        'address': 'Direcci√≥n',
        'phone_number': 'N√∫mero de Tel√©fono',
        'email': 'Email',
        'bank_account': 'Cuenta Bancaria',
        'relationship_to_org': 'Relaci√≥n con la Organizaci√≥n',
        'direct_beneficiary': 'Beneficiario Directo',
        'family_member': 'Miembro de la Familia',
        'description_of_need': 'Descripci√≥n de Necesidad o Apoyo',
        'declaration': 'Declaro que la informaci√≥n es precisa y consiento el uso de datos.',
        'register_beneficiary_btn': 'Registrar Beneficiario',
        'org_name': 'Nombre Completo / Nombre de Organizaci√≥n',
        'contact_person': 'Persona de Contacto (si es organizaci√≥n)',
        'type_of_support': 'Tipo de Apoyo',
        'financial': 'Financiero',
        'in_kind': 'En Especie',
        'volunteer': 'Voluntario',
        'other': 'Otro',
        'donation_value': 'Cantidad de Donaci√≥n / Valor',
        'frequency': 'Frecuencia',
        'one_time': 'Una vez',
        'monthly': 'Mensual',
        'quarterly': 'Trimestral',
        'annually': 'Anual',
        'preferred_contact': 'M√©todo de Contacto Preferido',
        'phone': 'Tel√©fono',
        'mail': 'Correo',
        'register_supporter_btn': 'Registrar Partidario',
        'reports_dashboard': 'üìä Panel de Informes',
        'summary': 'üìå Resumen',
        'beneficiaries': 'Beneficiarios',
        'supporters': 'Partidarios',
        'matches': 'Coincidencias',
        'download_csv': '‚¨áÔ∏è Descargar CSV de {table}',
        'no_records': 'No se encontraron registros de {table}.',
        'success_registered': '¬°{type} registrado exitosamente!',
        'failed_register': 'Error al registrar {type}.',
        'complete_required_fields': 'Por favor complete todos los campos requeridos y acepte la declaraci√≥n.',
        'invalid_email': 'Formato de email inv√°lido.',
        'invalid_phone': 'N√∫mero de tel√©fono inv√°lido.',
        'supabase_error': 'Faltan credenciales de Supabase. Ponga SUPABASE_URL y SUPABASE_KEY en un archivo .env.',
        'contact_admin': 'Contactar Admin',
        'contact_us': 'Cont√°ctanos',
        'help_support': 'Ayuda y Soporte',
        'subject': 'Asunto',
        'message': 'Mensaje',
        'urgent': 'Urgente',
        'general_inquiry': 'Consulta General',
        'technical_issue': 'Problema T√©cnico',
        'registration_help': 'Ayuda de Registro',
        'data_correction': 'Correcci√≥n de Datos',
        'send_message': 'Enviar Mensaje',
        'message_sent': '¬°Mensaje enviado exitosamente!',
        'message_failed': 'Error al enviar mensaje.',
        'admin_contact_info': 'Informaci√≥n de Contacto del Admin',
        'phone_contact': 'Contacto Telef√≥nico',
        'email_contact': 'Contacto por Email',
        'office_hours': 'Horario de Oficina',
        'emergency_contact': 'Contacto de Emergencia',
        'faq': 'Preguntas Frecuentes',
        'how_to_register': '¬øC√≥mo registrarse?',
        'forgot_password': '¬øOlvidaste tu contrase√±a?',
        'update_info': '¬øC√≥mo actualizar mi informaci√≥n?'
    },
    'fr': {
        'title': 'ü§ù BetterTogether',
        'today': "Aujourd'hui",
        'navigation': 'Navigation',
        'home': 'Accueil',
        'register_beneficiary': 'Inscrire un B√©n√©ficiaire',
        'register_supporter': 'Inscrire un Supporter/Donateur',
        'reports': 'Rapports',
        'admin': 'Admin',
        'language': 'Langue',
        'welcome_message': 'Bienvenue sur la plateforme BetterTogether. Connectez les B√©n√©ficiaires avec les Supporters offrant de l\'aide.',
        'system_status': '√âtat du Syst√®me',
        'features_disabled': 'Certaines fonctionnalit√©s sont d√©sactiv√©es en raison de probl√®mes de base de donn√©es:',
        'admin_login': 'Connexion Admin',
        'admin_email': 'Email Admin',
        'admin_password': 'Mot de Passe Admin',
        'login_as_admin': 'Se Connecter en tant qu\'Admin',
        'admin_logged_in': 'Admin connect√©!',
        'invalid_credentials': 'Identifiants admin invalides',
        'full_name': 'Nom Complet',
        'date_of_birth': 'Date de Naissance',
        'address': 'Adresse',
        'phone_number': 'Num√©ro de T√©l√©phone',
        'email': 'Email',
        'bank_account': 'Compte Bancaire',
        'relationship_to_org': 'Relation avec l\'Organisation',
        'direct_beneficiary': 'B√©n√©ficiaire Direct',
        'family_member': 'Membre de la Famille',
        'description_of_need': 'Description du Besoin ou du Support',
        'declaration': 'Je d√©clare que les informations sont exactes et je consens √† l\'utilisation des donn√©es.',
        'register_beneficiary_btn': 'Inscrire le B√©n√©ficiaire',
        'org_name': 'Nom Complet / Nom d\'Organisation',
        'contact_person': 'Personne de Contact (si organisation)',
        'type_of_support': 'Type de Support',
        'financial': 'Financier',
        'in_kind': 'En Nature',
        'volunteer': 'B√©n√©vole',
        'other': 'Autre',
        'donation_value': 'Montant de Don / Valeur',
        'frequency': 'Fr√©quence',
        'one_time': 'Une fois',
        'monthly': 'Mensuel',
        'quarterly': 'Trimestriel',
        'annually': 'Annuel',
        'preferred_contact': 'M√©thode de Contact Pr√©f√©r√©e',
        'phone': 'T√©l√©phone',
        'mail': 'Courrier',
        'register_supporter_btn': 'Inscrire le Supporter',
        'reports_dashboard': 'üìä Tableau de Bord des Rapports',
        'summary': 'üìå R√©sum√©',
        'beneficiaries': 'B√©n√©ficiaires',
        'supporters': 'Supporters',
        'matches': 'Correspondances',
        'download_csv': '‚¨áÔ∏è T√©l√©charger CSV {table}',
        'no_records': 'Aucun enregistrement de {table} trouv√©.',
        'success_registered': '{type} inscrit avec succ√®s!',
        'failed_register': '√âchec de l\'inscription de {type}.',
        'complete_required_fields': 'Veuillez remplir tous les champs obligatoires et accepter la d√©claration.',
        'invalid_email': 'Format d\'email invalide.',
        'invalid_phone': 'Num√©ro de t√©l√©phone invalide.',
        'supabase_error': 'Identifiants Supabase manquants. Mettez SUPABASE_URL et SUPABASE_KEY dans un fichier .env.',
        'contact_admin': 'Contacter l\'Admin',
        'contact_us': 'Nous Contacter',
        'help_support': 'Aide et Support',
        'subject': 'Sujet',
        'message': 'Message',
        'urgent': 'Urgent',
        'general_inquiry': 'Demande G√©n√©rale',
        'technical_issue': 'Probl√®me Technique',
        'registration_help': 'Aide √† l\'Inscription',
        'data_correction': 'Correction de Donn√©es',
        'send_message': 'Envoyer le Message',
        'message_sent': 'Message envoy√© avec succ√®s!',
        'message_failed': '√âchec de l\'envoi du message.',
        'admin_contact_info': 'Informations de Contact Admin',
        'phone_contact': 'Contact T√©l√©phonique',
        'email_contact': 'Contact Email',
        'office_hours': 'Heures de Bureau',
        'emergency_contact': 'Contact d\'Urgence',
        'faq': 'Questions Fr√©quentes',
        'how_to_register': 'Comment s\'inscrire?',
        'forgot_password': 'Mot de passe oubli√©?',
        'update_info': 'Comment mettre √† jour mes informations?'
    },
    'am': {  # Amharic
        'title': 'ü§ù ·ã®·àõ·àÖ·â†·à®·à∞·â• ·àõ·åà·äì·äõ',
        'today': '·ãõ·à¨',
        'navigation': '·àò·àÑ·åÉ',
        'home': '·ãà·ã∞ ·â§·âµ',
        'register_beneficiary': '·â∞·å†·âÉ·àö·äï ·àò·àò·ãù·åà·â•',
        'register_supporter': '·ã∞·åã·çä/·àà·åã·àΩ ·àò·àò·ãù·åà·â•',
        'reports': '·à™·çñ·à≠·â∂·âΩ',
        'admin': '·ä†·àµ·â∞·ã≥·ã≥·à™',
        'language': '·âã·äï·âã',
        'welcome_message': '·ãà·ã∞ ·ã®·àõ·àÖ·â†·à®·à∞·â• ·àõ·åà·äì·äõ ·àò·ãµ·à®·ä≠ ·ä•·äï·ä≥·äï ·â†·ã∞·àÖ·äì ·àò·å°·ç¢ ·â∞·å†·âÉ·àö·ãé·âΩ·äï ·ä•·à≠·ã≥·â≥ ·ä®·àö·ã´·âÄ·à≠·â° ·ã∞·åã·çä·ãé·âΩ ·åã·à≠ ·ã´·åà·äì·äô·ç¢',
        'system_status': '·ã®·àµ·à≠·ãì·âµ ·àÅ·äî·â≥',
        'features_disabled': '·â†·àò·à®·åÉ ·âã·âµ ·âΩ·åç·àÆ·âΩ ·àù·ä≠·äï·ã´·âµ ·ä†·äï·ã≥·äï·ãµ ·â£·àÖ·à™·ã´·âµ ·â∞·à∞·äì·ä≠·àà·ãã·àç:',
        'admin_login': '·ä†·àµ·â∞·ã≥·ã≥·à™ ·àò·åç·â¢·ã´',
        'admin_email': '·ä†·àµ·â∞·ã≥·ã≥·à™ ·ä¢·àú·ã≠·àç',
        'admin_password': '·ä†·àµ·â∞·ã≥·ã≥·à™ ·ã®·ã≠·àà·çç ·âÉ·àç',
        'login_as_admin': '·ä•·äï·ã∞ ·ä†·àµ·â∞·ã≥·ã≥·à™ ·ã≠·åç·â°',
        'admin_logged_in': '·ä†·àµ·â∞·ã≥·ã≥·à™ ·åà·â•·â∑·àç!',
        'invalid_credentials': '·ã®·â∞·à≥·à≥·â∞ ·ä†·àµ·â∞·ã≥·ã≥·à™ ·àò·à®·åÉ',
        'full_name': '·àô·àâ ·àµ·àù',
        'date_of_birth': '·ã®·âµ·ãç·àç·ãµ ·âÄ·äï',
        'address': '·ä†·ãµ·à´·àª',
        'phone_number': '·àµ·àç·ä≠ ·âÅ·å•·à≠',
        'email': '·ä¢·àú·ã≠·àç',
        'bank_account': '·ã®·â£·äï·ä≠ ·àí·à≥·â•',
        'relationship_to_org': '·ä®·ãµ·à≠·åÖ·â± ·åã·à≠ ·ã´·àà·ãç ·åç·äï·äô·äê·âµ',
        'direct_beneficiary': '·âÄ·å•·â∞·äõ ·â∞·å†·âÉ·àö',
        'family_member': '·ã®·â§·â∞·à∞·â• ·ä†·â£·àç',
        'description_of_need': '·ã®·çç·àã·åé·âµ ·ãà·ã≠·àù ·ãµ·åã·çç ·àò·åç·àà·å´',
        'declaration': '·àò·à®·åÉ·ãç ·âµ·ä≠·ä≠·àç ·àò·àÜ·äë·äï ·ä†·à®·åã·åç·å£·àà·àÅ ·ä•·äì ·àà·àò·à®·åÉ ·ä†·å†·âÉ·âÄ·àù ·ä•·àµ·àõ·àõ·àà·àÅ·ç¢',
        'register_beneficiary_btn': '·â∞·å†·âÉ·àö·äï ·àò·àò·ãù·åà·â•',
        'org_name': '·àô·àâ ·àµ·àù / ·ã®·ãµ·à≠·åÖ·âµ ·àµ·àù',
        'contact_person': '·ã®·àò·åà·äì·äõ ·à∞·ãç (·ãµ·à≠·åÖ·âµ ·ä®·àÜ·äê)',
        'type_of_support': '·ã®·ãµ·åã·çç ·ä†·ã≠·äê·âµ',
        'financial': '·ã®·åà·äï·ãò·â•',
        'in_kind': '·ä•·âÉ',
        'volunteer': '·â†·åé ·çà·âÉ·ã∞·äõ',
        'other': '·àå·àã',
        'donation_value': '·ã®·àç·åà·à≥ ·àò·å†·äï / ·ãã·åã',
        'frequency': '·ãµ·åç·åç·àû·àΩ',
        'one_time': '·ä†·äï·ãµ ·åä·ãú',
        'monthly': '·ãà·à≠·àÉ·ãä',
        'quarterly': '·à©·â• ·ä†·àò·â≥·ãä',
        'annually': '·ä†·àò·â≥·ãä',
        'preferred_contact': '·ã®·â∞·àò·à®·å† ·ã®·àò·åà·äì·äõ ·àò·äï·åà·ãµ',
        'phone': '·àµ·àç·ä≠',
        'mail': '·çñ·àµ·â≥',
        'register_supporter_btn': '·ã∞·åã·çä·äï ·àò·àò·ãù·åà·â•',
        'reports_dashboard': 'üìä ·ã®·à™·çñ·à≠·â∂·âΩ ·ã≥·àΩ·â¶·à≠·ãµ',
        'summary': 'üìå ÿÆŸÑÿßÿµÿ©',
        'beneficiaries': '·â∞·å†·âÉ·àö·ãé·âΩ',
        'supporters': '·ã∞·åã·çä·ãé·âΩ',
        'matches': '·åç·äï·äô·äê·â∂·âΩ',
        'download_csv': '‚¨áÔ∏è {table} CSV ·ä†·ãç·à≠·ãµ',
        'no_records': '·ã®{table} ·àò·ãù·åà·â¶·âΩ ·ä†·àç·â∞·åà·äô·àù·ç¢',
        'success_registered': '{type} ·â†·â∞·à≥·ä´ ·àÅ·äî·â≥ ·â∞·àò·ãù·åç·âß·àç!',
        'failed_register': '{type} ·àõ·àµ·àò·ãù·åà·â• ·ä†·àç·â∞·à≥·ä´·àù·ç¢',
        'complete_required_fields': '·ä•·â£·ä≠·ãé ·àÅ·àâ·äï·àù ·ä†·àµ·çà·àã·åä ·àò·àµ·äÆ·âΩ ·ã≠·àô·àâ ·ä•·äì ·àà·àò·åç·àà·å´·ãç ·ã≠·àµ·àõ·àô·ç¢',
        'invalid_email': '·ã®·â∞·à≥·à≥·â∞ ·ä¢·àú·ã≠·àç ·âÖ·à≠·çÖ·ç¢',
        'invalid_phone': '·ã®·â∞·à≥·à≥·â∞ ·àµ·àç·ä≠ ·âÅ·å•·à≠·ç¢',
        'supabase_error': '·ã®Supabase ·àõ·à®·åã·åà·å´·ãé·âΩ ·â∞·à∞·äì·ä≠·àà·ãã·àç·ç¢ SUPABASE_URL ·ä•·äì SUPABASE_KEY ·â†.env ·çã·ã≠·àç ·ãç·àµ·å• ·ã´·àµ·âÄ·àù·å°·ç¢',
        'contact_admin': '·ä†·àµ·â∞·ã≥·ã≥·à™·äï ·ã´·äê·åã·åç·à©',
        'contact_us': '·ã´·äê·åã·åç·à©·äï',
        'help_support': '·ä•·à≠·ã≥·â≥ ·ä•·äì ·ãµ·åã·çç',
        'subject': '·à≠·ãï·àµ',
        'message': '·àò·àç·ä•·ä≠·âµ',
        'urgent': '·ä†·àµ·â∏·ä≥·ã≠',
        'general_inquiry': '·ä†·å†·âÉ·àã·ã≠ ·å•·ã´·âÑ',
        'technical_issue': '·â¥·ä≠·äí·ä´·ãä ·âΩ·åç·à≠',
        'registration_help': '·ã®·àù·ãù·åà·â£ ·ä•·à≠·ã≥·â≥',
        'data_correction': '·ã®·àò·à®·åÉ ·àõ·àµ·â∞·ä´·ä®·ã´',
        'send_message': '·àò·àç·ä•·ä≠·âµ ·àã·ä≠',
        'message_sent': '·àò·àç·ä•·ä≠·âµ ·â†·â∞·à≥·ä´ ·àÅ·äî·â≥ ·â∞·àç·ä≥·àç!',
        'message_failed': '·àò·àç·ä•·ä≠·âµ ·àò·àã·ä≠ ·ä†·àç·â∞·à≥·ä´·àù·ç¢',
        'admin_contact_info': '·ã®·ä†·àµ·â∞·ã≥·ã≥·à™ ·ã®·ä•·ãç·âÖ·äì ·àò·à®·åÉ',
        'phone_contact': '·ã®·àµ·àç·ä≠ ·ä•·ãç·âÖ·äì',
        'email_contact': '·ã®·ä¢·àú·ã≠·àç ·ä•·ãç·âÖ·äì',
        'office_hours': '·ã®·â¢·àÆ ·à∞·ãì·âµ',
        'emergency_contact': '·ã®·ä†·àµ·â∏·ä≥·ã≠ ·ä•·ãç·âÖ·äì',
        'faq': '·â†·â∞·ã∞·åã·åã·àö ·ã®·àö·å†·ã®·âÅ ·å•·ã´·âÑ·ãé·âΩ',
        'how_to_register': '·ä•·äï·ã¥·âµ ·àò·àò·ãù·åà·â• ·ã≠·âª·àã·àç?',
        'forgot_password': '·ã®·ã≠·àà·çç ·âÉ·àç ·à®·à±?',
        'update_info': '·àò·à®·åÉ·ã®·äï ·ä•·äï·ã¥·âµ ·àõ·ãò·àò·äï ·ä•·âΩ·àã·àà·àÅ?'
    },
    'ti': {  # Tigrinya
        'title': 'ü§ù ·äì·ã≠ ·àï·â•·à®·â∞·à∞·â• ·àõ·àï·â†·à≠',
        'today': '·àé·àö',
        'navigation': '·àò·à≥·åà·à™',
        'home': '·åà·ãõ',
        'register_beneficiary': '·â∞·å†·âÉ·àö ·àù·ãù·åà·â£',
        'register_supporter': '·ã∞·åã·çä/·ãã·àÉ·â¢ ·àù·ãù·åà·â£',
        'reports': '·à™·çñ·à≠·â≥·âµ',
        'admin': '·ä£·àµ·â∞·ã≥·ã≥·à™',
        'language': '·âã·äï·âã',
        'welcome_message': '·äì·â• ·äì·ã≠ ·àï·â•·à®·â∞·à∞·â• ·àõ·àï·â†·à≠ ·àò·ãµ·à®·äΩ ·ä•·äï·âã·ãï ·â•·ã∞·àì·äï ·àò·åª·ä•·ä©·àù·ç¢ ·â∞·å†·âÉ·àõ·ã≠ ·àù·àµ ·àì·åà·ãõ ·ãö·àÖ·â° ·ã∞·åà·çç·â≤ ·ä£·àï·àΩ·à©·ç¢',
        'system_status': '·àì·â†·à¨·â≥ ·àµ·à≠·ãì·âµ',
        'features_disabled': '·â•·à∞·â†·â• ·äì·ã≠ ·ã≥·â≥·â§·ãù ·å∏·åà·àõ·âµ ·åà·àà ·â£·àÖ·à≠·ã´·âµ ·â∞·ãì·åΩ·ãÆ·àù:',
        'admin_login': '·ä£·àµ·â∞·ã≥·ã≥·à™ ·àò·ä•·â∞·ãä',
        'admin_email': '·ä£·àµ·â∞·ã≥·ã≥·à™ ·ä¢·àò·ã≠·àç',
        'admin_password': '·ä£·àµ·â∞·ã≥·ã≥·à™ ·àù·àµ·å¢·à≠ ·âÉ·àç',
        'login_as_admin': '·ä®·àù ·ä£·àµ·â∞·ã≥·ã≥·à™ ·ä£·â±',
        'admin_logged_in': '·ä£·àµ·â∞·ã≥·ã≥·à™ ·ä£·â≤·ã©!',
        'invalid_credentials': '·ãò·ã≠·âÖ·äë·ãï ·äì·ã≠ ·ä£·àµ·â∞·ã≥·ã≥·à™ ·àò·à®·åã·åà·å∫',
        'full_name': '·àô·àâ·ä• ·àµ·àù',
        'date_of_birth': '·ãï·àà·âµ ·àç·ã∞·âµ',
        'address': '·ä£·ãµ·à´·àª',
        'phone_number': '·äì·ã≠ ·â¥·àà·çé·äï ·âÅ·åΩ·à™',
        'email': '·ä¢·àò·ã≠·àç',
        'bank_account': '·äì·ã≠ ·â£·äï·ä≠ ·àí·à≥·â•',
        'relationship_to_org': '·àù·àµ ·ãç·ã≥·â† ·ãò·àé ·ãù·àù·ãµ·äì',
        'direct_beneficiary': '·âÄ·å•·â∞·äõ ·â∞·å†·âÉ·àö',
        'family_member': '·äì·ã≠ ·àµ·ãµ·à´·â§·âµ ·ä£·â£·àç',
        'description_of_need': '·äì·ã≠ ·ãµ·àå·âµ ·ãà·ã≠ ·ã∞·åà·çç ·àò·åç·àà·å∫',
        'declaration': '·ä•·â≤ ·àì·â†·à¨·â≥ ·âÖ·äë·ãï ·àù·ãÉ·äë·äï ·äï·ä£·å†·âì·âï·àõ ·àò·à®·åÉ ·ãö·à∞·àõ·àù·ãï ·àù·ãÉ·äê·ã≠·äï ·ã®·à®·åã·åç·åΩ·ç¢',
        'register_beneficiary_btn': '·â∞·å†·âÉ·àö ·àù·ãù·åà·â£',
        'org_name': '·àô·àâ·ä• ·àµ·àù / ·äì·ã≠ ·ãç·ã≥·â† ·àµ·àù',
        'contact_person': '·äì·ã≠ ·à≠·ä≠·â• ·à∞·â• (·ãç·ã≥·â† ·ä•·äï·â∞·äæ·ã≠·äë)',
        'type_of_support': '·ãì·ã≠·äê·âµ ·ã∞·åà·çç',
        'financial': '·åà·äï·ãò·â£·ãä',
        'in_kind': '·äï·â•·à®·âµ',
        'volunteer': '·ãà·àã·ã≥·ã≠·äê·âµ',
        'other': '·ä´·àç·ä•',
        'donation_value': '·àò·å†·äï ·ãà·ã≠ ·ãã·åã ·àÉ·ãµ·äê·âµ',
        'frequency': '·ãµ·åç·åç·àù·äê·âµ',
        'one_time': '·àì·ã∞ ·åç·ãú',
        'monthly': '·ãà·à≠·àì·ãä',
        'quarterly': '·à©·â•·ãì·ãä',
        'annually': '·ãì·àò·â≥·ãä',
        'preferred_contact': '·ãö·àò·à®·å∏ ·äì·ã≠ ·à≠·ä≠·â• ·ä£·åà·â£·â•',
        'phone': '·â¥·àà·çé·äï',
        'mail': '·çñ·àµ·â≥',
        'register_supporter_btn': '·ã∞·åã·çä ·àù·ãù·åà·â£',
        'reports_dashboard': 'üìä ·äì·ã≠ ·à™·çñ·à≠·â≥·âµ ·ã≥·àΩ·â¶·à≠·ãµ',
        'summary': 'üìå ·àì·çÇ·à≠ ·àò·åç·àà·å∫',
        'beneficiaries': '·â∞·å†·âÉ·àõ·ã≠',
        'supporters': '·ã∞·åà·çç·â≤',
        'matches': '·à≠·ä≠·â£·âµ',
        'download_csv': '‚¨áÔ∏è {table} CSV ·ä£·ãç·à≠·ãµ',
        'no_records': '·äì·ã≠ {table} ·àò·ãù·åà·â£·âµ ·ä£·ã≠·â∞·à®·äΩ·â°·äï·ç¢',
        'success_registered': '{type} ·â•·ãì·ãà·âµ ·â∞·àò·ãù·åä·â°!',
        'failed_register': '{type} ·àù·ãù·åà·â£ ·ä£·ã≠·â∞·à≥·ä´·äï·ç¢',
        'complete_required_fields': '·â†·åÉ·äπ·àù ·ä©·àé·àù ·ä£·åà·ã∞·àµ·â≤ ·àò·àµ·äÆ·â≥·âµ ·àù·àç·ä°·äï ·äï·àò·åç·àà·å∫ ·à∞·àõ·àù·ãë·äï·ç¢',
        'invalid_email': '·ãò·ã≠·âÖ·äë·ãï ·äì·ã≠ ·ä¢·àò·ã≠·àç ·âÖ·à≠·å∫·ç¢',
        'invalid_phone': '·ãò·ã≠·âÖ·äë·ãï ·äì·ã≠ ·â¥·àà·çé·äï ·âÅ·åΩ·à™·ç¢',
        'supabase_error': '·äì·ã≠ Supabase ·àò·à®·åã·åà·å∫·â≥·âµ ·å†·çä·ä¶·àù·ç¢ SUPABASE_URL ·ä®·àù·ä°·ãç·äï SUPABASE_KEY ·ä£·â• .env ·çã·ã≠·àç ·ä£·âê·àù·å°·ç¢'
    }
}

# -------------------------
# Translation helper function
# -------------------------
def get_text(key: str) -> str:
    """Get translated text based on current language"""
    lang = st.session_state.get('language', 'en')
    return TRANSLATIONS.get(lang, TRANSLATIONS['en']).get(key, key)

# -------------------------
# Load config
# -------------------------
load_dotenv()
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

if not SUPABASE_URL or not SUPABASE_KEY:
    st.error(get_text('supabase_error'))
    st.stop()

supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

# -------------------------
# Logging setup
# -------------------------
logging.basicConfig(level=logging.INFO, filename='app.log')
logger = logging.getLogger(__name__)

# -------------------------
# Session state initialization
# -------------------------
for key, default in {
    "Admin_authenticated": False,
    "schema_warnings": [],
    "matches_enabled": True,
    "locks_enabled": True,
    "language": "en"
}.items():
    if key not in st.session_state:
        st.session_state[key] = default

# -------------------------
# Helper functions
# -------------------------
def insert_record(table: str, data: dict) -> bool:
    try:
        res = supabase.table(table).insert(data).execute()
        logger.info(f"Insert response: {res}")
        if hasattr(res, "data") and res.data:
            logger.info(f"Inserted record into {table}: {res.data}")
            return True
        return False
    except Exception as e:
        logger.error(f"Insert failed for {table}: {str(e)}")
        return False


def fetch_table(table: str) -> pd.DataFrame:
    try:
        res = supabase.table(table).select("*").execute()
        if hasattr(res, "data") and res.data:
            return pd.DataFrame(res.data)
        return pd.DataFrame()
    except Exception as e:
        logger.error(f"Fetch failed for {table}: {str(e)}")
        return pd.DataFrame()

def is_valid_email(email):
    return re.match(r"[^@]+@[^@]+\.[^@]+", email)

def is_valid_phone(phone):
    return re.match(r"^\+?\d{7,15}$", phone)

def mask_account(account):
    return f"****{account[-4:]}" if account else ""

# -------------------------
# Schema validation
# -------------------------
def validate_schema():
    critical_tables = [
        ("beneficiaries", {"id", "full_name", "phone_number", "status", "bank_account"}),
        ("supporters", {"id", "organization_name", "phone_number", "status"})
    ]
    optional_tables = [
        ("matches", {"beneficiary_id", "supporter_id", "matched_at"}),
        ("locks", {"lock_name", "is_locked", "locked_at"})
    ]
    warnings = []
    for table, required_cols in critical_tables + optional_tables:
        df = fetch_table(table)
        if not df.empty and not required_cols.issubset(df.columns):
            warnings.append(f"Table {table} missing required columns: {required_cols - set(df.columns)}")
            logger.warning(f"Schema warning for table {table}: {warnings[-1]}")
    st.session_state["schema_warnings"] = warnings
validate_schema()

# -------------------------
# Streamlit UI
# -------------------------
st.set_page_config(page_title="BetterTogether", layout="wide")

# Language selector at the top
col1, col2 = st.columns([3, 1])
with col1:
    st.title(get_text('title'))
    st.caption(f"üìÖ {get_text('today')}: {datetime.today().strftime('%B %d, %Y')}")

with col2:
    language_options = {
        'en': 'üá∫üá∏ English',
        'de': 'üá©üá™ Deutsch', 
        'es': 'üá™üá∏ Espa√±ol',
        'fr': 'üá´üá∑ Fran√ßais',
        'am': 'üá™üáπ ·ä†·àõ·à≠·äõ',
        'ti': 'üá™üá∑ ·âµ·åç·à≠·äõ'
    }
    
    selected_lang = st.selectbox(
        get_text('language'),
        options=list(language_options.keys()),
        format_func=lambda x: language_options[x],
        index=list(language_options.keys()).index(st.session_state.get('language', 'en'))
    )
    
    if selected_lang != st.session_state.get('language'):
        st.session_state['language'] = selected_lang
        st.rerun()

# -------------------------
# Sidebar navigation
# -------------------------
menu_options = [
    get_text('home'), 
    get_text('register_beneficiary'), 
    get_text('register_supporter'), 
    get_text('contact_us'),
    get_text('admin')
]

# Add Reports only if admin is authenticated
if st.session_state.get("Admin_authenticated", False):
    menu_options.insert(3, get_text('reports'))  # Insert before contact_us

menu = st.sidebar.radio(get_text('navigation'), menu_options)

# Add contact info in sidebar
st.sidebar.markdown("---")
st.sidebar.markdown(f"### üìû {get_text('contact_admin')}")
st.sidebar.markdown(f"**{get_text('phone_contact')}:** +49-176-451-74080")
st.sidebar.markdown(f"**{get_text('email_contact')}:** admin@communitymatcher.org")
st.sidebar.markdown(f"**{get_text('office_hours')}:** 8:00 AM - 6:00 PM")
st.sidebar.markdown(f"**{get_text('emergency_contact')}:** +251-91-111-2222")

# -------------------------
# Admin login only on Admin page
# -------------------------
if menu == get_text('admin') and not st.session_state["Admin_authenticated"]:
    st.subheader(get_text('admin_login'))
    with st.form("admin_login_form"):
        admin_email = st.text_input(get_text('admin_email'))
        admin_password = st.text_input(get_text('admin_password'), type="password")
        admin_login_button = st.form_submit_button(get_text('login_as_admin'))
        if admin_login_button:
            if admin_email in ["hailiyekidu@gmail.com", "admin@example.com"] and admin_password == "admin123":
                st.session_state["Admin_authenticated"] = True
                st.success(get_text('admin_logged_in'))
                st.rerun()
            else:
                st.error(get_text('invalid_credentials'))
    st.stop()

# -------------------------
# Pages
# -------------------------
if menu == get_text('home'):
    st.markdown(get_text('welcome_message'))
    if st.session_state.get("schema_warnings"):
        with st.expander(get_text('system_status'), expanded=True):
            st.warning(get_text('features_disabled'))
            for warning in st.session_state["schema_warnings"]:
                st.write(f"- {warning}")
# #Beneficiary Registration Section
# elif menu == get_text('register_beneficiary'):
#     st.subheader(get_text('beneficiaries'))
#     with st.form("beneficiary_form"):
#         full_name = st.text_input(get_text('full_name'))
#         email = st.text_input(get_text('email'))
#         phone = st.text_input(get_text('phone_contact'))
#         bank_account = st.text_input("Bank Account")
#         submit = st.form_submit_button("Register Beneficiary")

#         if submit:
#             if full_name and email and phone and bank_account:
#                 if not is_valid_email(email):
#                     st.error(get_text('invalid_email'))
#                 elif not is_valid_phone(phone):
#                     st.error(get_text('invalid_phone'))
#                 else:
#                     data = {
#                         "full_name": full_name,
#                         "email": email,
#                         "phone": phone,
#                         "bank_account": bank_account,
#                         "submitted_at": datetime.now().isoformat()
#                     }
#                     if insert_record("beneficiaries", data):
#                         st.success("Beneficiary registered successfully.")
#                     else:
#                         st.error("Failed to register Beneficiary.")
#             else:
#                 st.error(get_text('complete_required_fields'))

#     # Supporter Registration Section
# elif menu == get_text('register_supporter'):
#     st.subheader(get_text('supporters'))
#     with st.form("supporter_form"):
#         full_name = st.text_input(get_text('full_name'))
#         email = st.text_input(get_text('email'))
#         phone = st.text_input(get_text('phone_contact'))
#         submit = st.form_submit_button("Register Supporter")

#         if submit:
#             if full_name and email and phone:
#                 if not is_valid_email(email):
#                     st.error(get_text('invalid_email'))
#                 elif not is_valid_phone(phone):
#                     st.error(get_text('invalid_phone'))
#                 else:
#                     data = {
#                         "full_name": full_name,
#                         "email": email,
#                         "phone": phone,
#                         "submitted_at": datetime.now().isoformat()
#                     }
#                     if insert_record("supporters", data):
#                         st.success("Supporter registered successfully.")
#                     else:
#                         st.error("Failed to register Supporter.")
#             else:
#                 st.error(get_text('complete_required_fields'))

elif menu == get_text('register_beneficiary'):
    st.subheader(get_text('register_beneficiary'))
    with st.form("beneficiary_form"):
        full_name = st.text_input(get_text('full_name'))
        dob = st.date_input(get_text('date_of_birth'))
        address = st.text_area(get_text('address'))
        phone = st.text_input(get_text('phone_number'))
        email = st.text_input(get_text('email'))
        bank_account = st.text_input(get_text('bank_account'))
        relationship = st.selectbox(get_text('relationship_to_org'), [get_text('direct_beneficiary'), get_text('family_member')])
        description = st.text_area(get_text('description_of_need'))
        declaration = st.checkbox(get_text('declaration'))
        submit = st.form_submit_button(get_text('register_beneficiary_btn'))
        if submit:
            if full_name and phone and declaration:
                if email and not is_valid_email(email):
                    st.error(get_text('invalid_email'))
                elif not is_valid_phone(phone):
                    st.error(get_text('invalid_phone'))
                else:
                    data = {
                        "full_name": full_name,
                        "date_of_birth": dob.strftime("%Y-%m-%d"),
                        "address": address,
                        "phone_number": phone,
                        "email": email,
                        "bank_account": bank_account,
                        "relationship_to_org": relationship,
                        "description_of_need": description,
                        "declaration_consent": True,
                        "submitted_at": datetime.now().isoformat(),
                        "status": "Pending"
                    }
                    if insert_record("beneficiaries", data):
                        st.success(get_text('success_registered').format(type=get_text('beneficiaries')))
                    else:
                        st.error(get_text('failed_register').format(type=get_text('beneficiaries')))
            else:
                st.error(get_text('complete_required_fields'))

elif menu == get_text('register_supporter'):
    st.subheader(get_text('register_supporter'))
    with st.form("supporter_form"):
        org_name = st.text_input(get_text('org_name'))
        contact_person = st.text_input(get_text('contact_person'))
        address = st.text_area(get_text('address'))
        phone = st.text_input(get_text('phone_number'))
        email = st.text_input(get_text('email'))
        support_type = st.multiselect(get_text('type_of_support'), [
            get_text('financial'), 
            get_text('in_kind'), 
            get_text('volunteer'), 
            get_text('other')
        ])
        donation_value = st.text_input(get_text('donation_value'))
        frequency = st.selectbox(get_text('frequency'), [
            get_text('one_time'), 
            get_text('monthly'), 
            get_text('quarterly'), 
            get_text('annually')
        ])
        preferred_contact = st.selectbox(get_text('preferred_contact'), [
            get_text('email'), 
            get_text('phone'), 
            get_text('mail')
        ])
        declaration = st.checkbox(get_text('declaration'))
        submit = st.form_submit_button(get_text('register_supporter_btn'))
        if submit:
            if org_name and phone and declaration:
                if email and not is_valid_email(email):
                    st.error(get_text('invalid_email'))
                elif not is_valid_phone(phone):
                    st.error(get_text('invalid_phone'))
                else:
                    data = {
                        "organization_name": org_name,
                        "contact_person": contact_person,
                        "address": address,
                        "phone_number": phone,
                        "email": email,
                        "type_of_support": ", ".join(support_type),
                        "donation_value": donation_value,
                        "frequency": frequency,
                        "preferred_contact": preferred_contact,
                        "declaration_consent": True,
                        "submitted_at": datetime.now().isoformat(),
                        "status": "Pending"
                    }
                    if insert_record("supporters", data):
                        st.success(get_text('success_registered').format(type=get_text('supporters')))
                    else:
                        st.error(get_text('failed_register').format(type=get_text('supporters')))
            else:
                st.error(get_text('complete_required_fields'))
#Contact Us Section
elif menu == get_text('contact_us'):
    st.subheader(get_text('contact_us'))
    with st.form("contact_form"):
        subject = st.selectbox(get_text('subject'), [
            get_text('urgent'),
            get_text('general_inquiry'),
            get_text('technical_issue'),
            get_text('registration_help'),
            get_text('data_correction')
        ])
        message = st.text_area(get_text('message'))
        send_button = st.form_submit_button(get_text('send_message'))

        if send_button:
            if message:
                # Here you would typically send the message to an email or store it in a database
                st.success(get_text('message_sent'))
            else:
                st.error(get_text('complete_required_fields'))
##########Reports Section##########

elif menu == get_text('reports'):
    if not st.session_state.get("Admin_authenticated", False):
        st.warning(get_text("admin_login") + " " + get_text("required_to_access"))
        st.stop()

    st.subheader(get_text('reports_dashboard'))

    # Fetch data
    b_df = fetch_table("beneficiaries")
    s_df = fetch_table("supporters")
    m_df = fetch_table("matches")

    # Mask bank accounts
    if not b_df.empty and "bank_account" in b_df.columns:
        b_df["bank_account"] = b_df["bank_account"].apply(mask_account)

    # Summary Section
    st.markdown("## üìä " + get_text('summary'))
    col1, col2, col3 = st.columns(3)
    col1.metric(get_text('beneficiaries'), len(b_df))
    col2.metric(get_text('supporters'), len(s_df))
    col3.metric(get_text('matches'), len(m_df))

    st.markdown("---")

    # Beneficiaries Section
    st.markdown("## üßç " + get_text('beneficiaries'))
    if not b_df.empty:
        st.dataframe(b_df, use_container_width=True)
        st.download_button(
            label=get_text('download_csv').format(table=get_text('beneficiaries')),
            data=b_df.to_csv(index=False),
            file_name="beneficiaries.csv"
        )
    else:
        st.info(get_text('no_records').format(table=get_text('beneficiaries').lower()))

    st.markdown("---")

    # Supporters Section
    st.markdown("## ü§ù " + get_text('supporters'))
    if not s_df.empty:
        st.dataframe(s_df, use_container_width=True)
        st.download_button(
            label=get_text('download_csv').format(table=get_text('supporters')),
            data=s_df.to_csv(index=False),
            file_name="supporters.csv"
        )
    else:
        st.info(get_text('no_records').format(table=get_text('supporters').lower()))

    st.markdown("---")

    # Matches Section
    st.markdown("## üîó " + get_text('matches'))
    if st.session_state.get("matches_enabled", True):
        if not m_df.empty:
            st.dataframe(m_df, use_container_width=True)
            st.download_button(
                label=get_text('download_csv').format(table=get_text('matches')),
                data=m_df.to_csv(index=False),
                file_name="matches.csv"
            )
        else:
            st.info(get_text('no_records').format(table=get_text('matches').lower()))
